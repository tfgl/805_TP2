/* package et imports */
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;
import java.util.HashMap;

/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
    // HashMap pour la gestion des variables
    private HashMap<String,Integer> vars = new HashMap<>();
    // gestion des erreurs d'evaluation
    private boolean erreur = false;
    public static class Node {
      public String symbol;
      public Node left, right;

      public Node() {
        this.symbol = null;
        this.left = null;
        this.right = null;
      }

      public Node(String symbol) {
        this.symbol = symbol;
        this.left = null;
        this.right = null;
      }

      public boolean isLeaf() {
        return right == null && left == null;
      }

      public String toString() {
        String res = "";
        if(left != null)
          res += left.toString() + " ";

        res += symbol;

        if(right != null)
          res += " " + right.toString();

        if( !isLeaf() ) res = "("+res+")";
        return res;
      }

      Node pushRight(String s) {
        if(right != null) right.pushRight(s);
        right = new Node(s);
        return this;
      }

      Node pushLeft(String s) {
        if(left != null) left.pushLeft(s);
        left = new Node(s);
        return this;
      }
    }
:};

 
parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s != null && s.left >= 0 ) {
                /* Ajoute le numero de ligne  et de colonne*/
                m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
            }
        }
        m = m + message;
        System.err.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, NOT, OR, AND, PAR_G, PAR_D, SEMI, POINT, LET, INPUT, OUTPUT, IF, THEN, ELSE, WHILE, DO, EGAL, GT, GTE, NIL, ERROR; 
terminal Integer ENTIER;
terminal String IDENT;
/* non terminaux */
non terminal program, sequence, expression, expr;

precedence nonassoc OUTPUT;
precedence right OR;
precedence right AND;
precedence right NOT;
precedence nonassoc EGAL;
precedence nonassoc GT, GTE;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;

/* grammaire */
// un pg est une sequence d'insctions terminee par point
program ::= 
    sequence:s POINT
    ;

// une sequence est une suite d'instructions separes par des point virgules 
sequence ::= expression:e1 SEMI sequence:e2
            | expression:e   
            |
            ;

// une expession est soit une affectation ,une
expression ::= expr:e
             | LET IDENT:nom EGAL expr:e {: Node tree = new Node(";"); tree.pushRight("let").right.pushRight(nom); RESULT = tree; System.out.println(RESULT); :} //.pushLeft(e);
             | WHILE expr:cond DO expression:e
             | IF expr:cond THEN expression:a1 ELSE expression:a2
             | error // reprise d'erreurs
             ;

// expression arithmetiques et logiques 
expr ::= NOT:op expr:e            //{: RESULT = !e; :}
       | expr:e1 AND expr:e2      //{: RESULT = e1 && e2; :}
       | expr:e1 OR expr:e2       //{: RESULT = e1 || e2; :}
       | expr:e1 EGAL expr:e2     {: RESULT = e1 == e2; :}
       | expr:e1 GT expr:e2       {: RESULT = (Integer)e1 > (Integer)e2; :}
       | expr:e1 GTE expr:e2      {: RESULT = (Integer)e1 >=(Integer)e2; :}
       | expr:e1 PLUS expr:e2     {: RESULT = (Integer)e1 + (Integer)e2; :}
       | expr:e1 MOINS expr:e2    {: RESULT = (Integer)e1 - (Integer)e2; :}
       | expr:e1 MUL expr:e2      {: RESULT = (Integer)e1 * (Integer)e2; :}
       | expr:e1 DIV expr:e2      {: RESULT = (Integer)e1 / (Integer)e2; :}
       | expr:e1 MOD expr:e2      {: RESULT = (Integer)e1 % (Integer)e2; :}
       | MOINS expr:e             {: RESULT = -(Integer)e; :}%prec MOINS_UNAIRE 
       | OUTPUT expr:e            {: System.out.println(e); :}
       | INPUT                    //{: RESULT = (new Scanner(System.in)).nextInt(); :}
       | NIL                      //{: System.out.println(tree); :}
       | ENTIER:n                 {: RESULT = n; :}
       | IDENT:id
       | PAR_G sequence:e PAR_D
       ;
